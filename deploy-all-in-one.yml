name: Deploy Node.js Backend, Website, and Dashboard on EC2

on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'

jobs:
  deploy_backend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Node.js Backend Repository
        uses: actions/checkout@v3
        with:
          repository: 'your-username/backend-repo' # Replace with the backend repo name

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.15' # Specify Node.js version

      - name: Install Dependencies for Backend
        run: npm install --frozen-lockfile

      - name: Build Backend Project
        run: npm run build # Compile TypeScript or other build steps

      # Configure SSH and deploy the backend
      - name: Deploy Backend to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # EC2 Host URL or IP address
          EC2_USER: ${{ secrets.EC2_USER }} # EC2 SSH username (e.g., ubuntu)
          ENV_VARS_JSON: ${{ secrets.ENV_VARS_JSON }} # Backend environment variables
        run: |
          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/applications/backend"  # Ensure the backend folder exists
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='.github' . $EC2_USER@$EC2_HOST:~/applications/backend/
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/backend && npm install --frozen-lockfile --production"
          ssh $EC2_USER@$EC2_HOST "echo '$ENV_VARS_JSON' > ~/applications/backend/.env"
          ssh $EC2_USER@$EC2_HOST "pm2 delete nodejs-app || true"
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/backend && pm2 start dist/server.js --name nodejs-app"

  deploy_website:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Website Repository
        uses: actions/checkout@v3
        with:
          repository: 'your-username/website-repo' # Replace with the website repo name

      - name: Set up Node.js for Website
        uses: actions/setup-node@v3
        with:
          node-version: '20.15'

      - name: Install Dependencies for Website
        run: npm install --frozen-lockfile

      - name: Build Website Project
        run: npm run build # Ensure the website is built (if applicable)

      # Deploy the website to EC2
      - name: Deploy Website to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # EC2 Host URL or IP address
          EC2_USER: ${{ secrets.EC2_USER }} # EC2 SSH username (e.g., ubuntu)
        run: |
          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/applications/website"  # Ensure the website folder exists
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='.github' . $EC2_USER@$EC2_HOST:~/applications/website/
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/website && npm install --frozen-lockfile --production"
          # If using a frontend framework like React, you may want to run a build step here
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/website && npm run build"

  deploy_dashboard:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Dashboard Repository
        uses: actions/checkout@v3
        with:
          repository: 'your-username/dashboard-repo' # Replace with the dashboard repo name

      - name: Set up Node.js for Dashboard
        uses: actions/setup-node@v3
        with:
          node-version: '20.15'

      - name: Install Dependencies for Dashboard
        run: npm install --frozen-lockfile

      - name: Build Dashboard Project
        run: npm run build # Ensure the dashboard is built (if applicable)

      # Deploy the dashboard to EC2
      - name: Deploy Dashboard to EC2
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }} # EC2 Host URL or IP address
          EC2_USER: ${{ secrets.EC2_USER }} # EC2 SSH username (e.g., ubuntu)
        run: |
          ssh $EC2_USER@$EC2_HOST "mkdir -p ~/applications/dashboard"  # Ensure the dashboard folder exists
          rsync -avz --exclude='.git' --exclude='node_modules' --exclude='.github' . $EC2_USER@$EC2_HOST:~/applications/dashboard/
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/dashboard && npm install --frozen-lockfile --production"
          # If using a frontend framework like React, you may want to run a build step here
          ssh $EC2_USER@$EC2_HOST "cd ~/applications/dashboard && npm run build"
